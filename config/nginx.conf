
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  dev1.actvid.com;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }


	# See http://wiki.nginx.org/HttpUploadModule
	location = /upload {

	  # if resumable uploads are on, then the $upload_field_name variable
	  # won't be set because the Content-Type isn't (and isn't allowed to be)
	  # multipart/form-data, which is where the field name would normally be
	  # defined, so this *must* correspond to the field name in the Rails view
	  set $upload_field_name "archive";

	  # location to forward to once the upload completes
	  upload_pass /videos/notify_complete.json;

	  # filesystem location where we store uploads
	  #
	  # The second argument is the level of "hashing" that nginx will perform
	  # on the filenames before storing them to the filesystem. I can't find
	  # any documentation online, so as an example, say we were using this
	  # configuration:
	  #
	  #   upload_store /tmp/uploads 2 1;
	  #
	  # A file named '43829042' would be written to this path:
	  #
	  #   /tmp/uploads/42/0/43829042
	  #
	  # I hope that's clear enough. The argument is required and must be
	  # greater than 0. You can see the implementation here:
	  #
	  #  http://lxr.evanmiller.org/http/source/core/ngx_file.c#L118
	  upload_store /home/mrmike/work/activid/tmp/uploads 2 1;

	  # whether uploads are resumable
	  upload_resumable on;

	  # access mode for storing uploads
	  upload_store_access user:r;

	  # maximum upload size (0 for unlimited)
	  upload_max_file_size 0;

	  # form fields to be passed to Rails
	  upload_set_form_field $upload_field_name[filename] "$upload_file_name";
	  upload_set_form_field $upload_field_name[path] "$upload_tmp_path";
	  upload_set_form_field $upload_field_name[content_type] "$upload_content_type";
	  upload_aggregate_form_field $upload_field_name[size] "$upload_file_size";

	  # hashes are not supported for resumable uploads
	  # https://github.com/vkholodkov/nginx-upload-module/issues/12
	  #upload_aggregate_form_field $upload_field_name[signature] "$upload_file_sha1";
	}


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
